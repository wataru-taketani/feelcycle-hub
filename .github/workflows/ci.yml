name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [backend, frontend, infra]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install workspace dependencies
        run: npm ci --workspace=${{ matrix.workspace }}

      - name: Lint ${{ matrix.workspace }}
        run: npm run lint --workspace=${{ matrix.workspace }}

      - name: Test ${{ matrix.workspace }}
        run: npm run test --workspace=${{ matrix.workspace }}
        if: matrix.workspace == 'backend'

      - name: Build ${{ matrix.workspace }}
        run: npm run build --workspace=${{ matrix.workspace }}

  cdk-synth:
    name: CDK Synth
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: matrix.workspace == 'infra'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: CDK Synth
        run: npm run synth --workspace=infra
        env:
          CDK_DEFAULT_REGION: ap-northeast-1

      - name: Upload CDK outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-out
          path: infra/cdk.out/

  cost-estimate:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run cost estimation
        run: npm run cost-estimate

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, cdk-synth]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npm run build --workspace=backend

      - name: Deploy CDK to staging
        run: npm run deploy --workspace=infra -- --context environment=staging
        env:
          CDK_DEFAULT_REGION: ap-northeast-1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, cdk-synth]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ap-northeast-1

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npm run build --workspace=backend

      - name: Deploy CDK to production
        run: npm run deploy --workspace=infra -- --context environment=prod
        env:
          CDK_DEFAULT_REGION: ap-northeast-1

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify success
        if: contains(needs.*.result, 'success')
        run: echo "Deployment successful"
        
      - name: Notify failure
        if: contains(needs.*.result, 'failure')
        run: echo "Deployment failed"