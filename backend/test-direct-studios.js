const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
const { DynamoDBDocumentClient, ScanCommand } = require('@aws-sdk/lib-dynamodb');

const client = new DynamoDBClient({ region: 'ap-northeast-1' });
const docClient = DynamoDBDocumentClient.from(client);

async function testDirectStudios() {
  console.log('üîç „Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„Éá„Éº„Çø„ÇíÁõ¥Êé•Âá¶ÁêÜ„Åó„Å¶„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÂΩ¢Âºè„ÅßÂá∫Âäõ...');
  
  try {
    const result = await docClient.send(new ScanCommand({
      TableName: 'feelcycle-hub-studios-dev',
    }));

    const allStudios = result.Items || [];
    console.log(`Retrieved ${allStudios.length} studios from DB`);
    
    // Âú∞Âüü„Éû„ÉÉ„Éî„É≥„Ç∞
    const regionMap = {
      'TOKYO': 'tokyo',
      'KANAGAWA': 'kanagawa', 
      'KANTO': 'saitama',
      'KANSAI': 'osaka',
      'CHUBU': 'aichi',
      'KYUSHU': 'fukuoka',
      'HOKKAIDO': 'hokkaido',
      'CHUGOKU': 'hiroshima',
      'SHIKOKU': 'kagawa'
    };
    
    const mapRegion = (studioCode, studioName) => {
      if (studioName.includes('Êú≠Âπå')) return 'hokkaido';
      if (studioName.includes('‰ªôÂè∞')) return 'miyagi';
      if (studioName.includes('Ê®™Êµú') || studioName.includes('Â∑ùÂ¥é') || studioName.includes('Ê≠¶Ëîµ') || studioName.includes('„ÅÇ„Åñ„Åø')) return 'kanagawa';
      if (studioName.includes('Â§ßÂÆÆ') || studioName.includes('Ë∂äË∞∑')) return 'saitama';
      if (studioName.includes('Êüè') || studioName.includes('ËàπÊ©ã') || studioName.includes('Êµ∑ÊµúÂπïÂºµ')) return 'chiba';
      if (studioName.includes('ÂêçÂè§Â±ã') || studioName.includes('Ê†Ñ') || studioName.includes('Â≤êÈòú')) return 'aichi';
      if (studioName.includes('‰∫¨ÈÉΩ')) return 'kyoto';
      if (studioName.includes('Ê¢ÖÁî∞') || studioName.includes('ÂøÉÊñéÊ©ã') || (studioName.includes('‰∫¨Ê©ã') && studioName.includes('Â§ßÈò™'))) return 'osaka';
      if (studioName.includes('‰∏â„ÉéÂÆÆ')) return 'hyogo';
      if (studioName.includes('Á¶èÂ≤°') || studioName.includes('Â§©Á•û')) return 'fukuoka';
      if (studioName.includes('Â∫ÉÂ≥∂')) return 'hiroshima';
      if (studioName.includes('È´òÊùæ')) return 'kagawa';
      
      return 'tokyo';
    };
    
    // ÈáçË§áÈô§ÂéªÔºàÂ§ßÊñáÂ≠óÁâà„ÇíÂÑ™ÂÖàÔºâ
    const studioMap = new Map();
    allStudios.forEach(studio => {
      const key = studio.studioName;
      const existing = studioMap.get(key);
      // Â§ßÊñáÂ≠ó„ÅÆ„Çπ„Çø„Ç∏„Ç™„Ç≥„Éº„Éâ„Åæ„Åü„ÅØÂú∞ÂüüÊÉÖÂ†±„Åå„ÅÇ„ÇãÊñπ„ÇíÂÑ™ÂÖà
      if (!existing || (studio.studioCode === studio.studioCode.toUpperCase()) || (studio.region && studio.region !== 'unknown')) {
        const mappedRegion = studio.region && studio.region !== 'unknown' ? 
          regionMap[studio.region] || studio.region : 
          mapRegion(studio.studioCode, studio.studioName);
          
        studioMap.set(key, {
          code: studio.studioCode,
          name: studio.studioName,
          region: mappedRegion
        });
      }
    });
    
    const studios = Array.from(studioMap.values())
      .sort((a, b) => a.name.localeCompare(b.name));
      
    console.log(`\nüìä Processed studios: ${studios.length}`);
    
    // Âú∞ÂüüÂà•„Å´ÂàÜÈ°û
    const regions = [...new Set(studios.map(s => s.region))].sort();
    const studiosByRegion = regions.reduce((acc, region) => {
      acc[region] = studios.filter(s => s.region === region);
      return acc;
    }, {});
    
    console.log(`üåç Regions: ${regions.length} - [${regions.join(', ')}]`);
    
    console.log('\nüè¢ Studios by Region:');
    regions.forEach(region => {
      const regionStudios = studiosByRegion[region] || [];
      console.log(`\n  ${region.toUpperCase()} (${regionStudios.length}Â∫óËàó):`);
      regionStudios.forEach(studio => {
        console.log(`    ‚Ä¢ ${studio.name} (${studio.code})`);
      });
    });
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

testDirectStudios();