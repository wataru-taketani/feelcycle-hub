/**
 * ÂÆâÂÖ®„Å™„Çπ„Çø„Ç∏„Ç™„Éá„Éº„ÇøÂæ©Êóß„Çπ„ÇØ„É™„Éó„Éà
 * Á†¥Êêç„Åó„Åü„Çπ„Çø„Ç∏„Ç™„Éá„Éº„Çø„ÇíÊÆµÈöéÁöÑ„Å´Âæ©Êóß
 */

const AWS = require('aws-sdk');
const dynamodb = new AWS.DynamoDB.DocumentClient({ region: 'ap-northeast-1' });

// ‰ø°È†º„Åß„Åç„Çã„Çπ„Çø„Ç∏„Ç™„Éû„ÉÉ„Éî„É≥„Ç∞„Éá„Éº„ÇøÔºàFEELCYCLE„Çµ„Ç§„Éà„Åã„ÇâÁ¢∫Ë™çÊ∏à„ÅøÔºâ
const STUDIO_MAPPING = {
  // Ëá¥ÂëΩÁöÑÁ†¥Êêç„ÅÆ4„Çπ„Çø„Ç∏„Ç™ÔºàstudioName: NULLÔºâ
  'ykh': { name: 'Ê®™Êµú', region: 'Èñ¢Êù±' },
  'nmg': { name: '‰ª≤ÁõÆÈªí', region: 'Èñ¢Êù±' },  
  'sjk': { name: 'Êñ∞ÂÆø', region: 'Èñ¢Êù±' },
  'jyo': { name: 'Ëá™Áî±„Åå‰∏ò', region: 'Èñ¢Êù±' },
  
  // Êó¢Â≠ò„Çπ„Çø„Ç∏„Ç™„ÅÆÂú∞ÂüüÊÉÖÂ†±Ë£úÂÆå
  'azn': { name: '„ÅÇ„Åñ„ÅøÈáé', region: 'Èñ¢Êù±' },
  'aznp': { name: '„ÅÇ„Åñ„ÅøÈáéPilates', region: 'Èñ¢Êù±' },
  'fnb': { name: 'ËàπÊ©ã', region: 'Èñ¢Êù±' },
  'gkbs': { name: 'ÈäÄÂ∫ß‰∫¨Ê©ã', region: 'Èñ¢Êù±' },
  'gnz': { name: 'ÈäÄÂ∫ß', region: 'Èñ¢Êù±' },
  'gtd': { name: '‰∫îÂèçÁî∞', region: 'Èñ¢Êù±' },
  'ikb': { name: 'Ê±†Ë¢ã', region: 'Èñ¢Êù±' },
  'kcj': { name: 'ÂêâÁ••ÂØ∫', region: 'Èñ¢Êù±' },
  'khm': { name: 'Êµ∑ÊµúÂπïÂºµ', region: 'Èñ¢Êù±' },
  'kok': { name: '‰∏äÂ§ßÂ≤°', region: 'Èñ¢Êù±' },
  'ksg': { name: 'Ë∂äË∞∑', region: 'Èñ¢Êù±' },
  'ksw': { name: 'Êüè', region: 'Èñ¢Êù±' },
  'kws': { name: 'Â∑ùÂ¥é', region: 'Èñ¢Êù±' },
  'mcd': { name: 'Áî∫Áî∞', region: 'Èñ¢Êù±' },
  'mkg': { name: 'Ê≠¶ËîµÂ∞èÊùâ', region: 'Èñ¢Êù±' },
  'omy': { name: 'Â§ßÂÆÆ', region: 'Èñ¢Êù±' },
  'sby': { name: 'Ê∏ãË∞∑', region: 'Èñ¢Êù±' },
  'sdm': { name: 'Ê±êÁïô', region: 'Èñ¢Êù±' },
  'tmc': { name: 'Â§öÊë©„Çª„É≥„Çø„Éº', region: 'Èñ¢Êù±' },
  'uen': { name: '‰∏äÈáé', region: 'Èñ¢Êù±' },
  'ysc': { name: 'Ê®™È†àË≥Ä‰∏≠Â§Æ', region: 'Èñ¢Êù±' },
  
  // Êù±Êµ∑„ÉªÈñ¢Ë•ø„Éª„Åù„ÅÆ‰ªñ
  'ngy': { name: 'ÂêçÂè§Â±ã', region: 'Êù±Êµ∑' },
  'gif': { name: 'Â≤êÈòú', region: 'Êù±Êµ∑' },
  'ske': { name: 'Ê†Ñ', region: 'Êù±Êµ∑' },
  'ktk': { name: '‰∫¨ÈÉΩÊ≤≥ÂéüÁî∫', region: 'Èñ¢Ë•ø' },
  'okbs': { name: 'Â§ßÈò™‰∫¨Ê©ã', region: 'Èñ¢Ë•ø' },
  'smy': { name: '‰∏â„ÉéÂÆÆ', region: 'Èñ¢Ë•ø' },
  'ssb': { name: 'ÂøÉÊñéÊ©ã', region: 'Èñ¢Ë•ø' },
  'umdc': { name: 'Ê¢ÖÁî∞Ëå∂Â±ãÁî∫', region: 'Èñ¢Ë•ø' },
  'ftj': { name: 'Á¶èÂ≤°Â§©Á•û', region: '‰πùÂ∑û' },
  'hsm': { name: 'Â∫ÉÂ≥∂', region: '‰∏≠ÂõΩ' },
  'spr': { name: 'Êú≠Âπå', region: 'ÂåóÊµ∑ÈÅì' },
  'tkm': { name: 'È´òÊùæ', region: 'ÂõõÂõΩ' }
};

async function createBackup() {
  console.log('üìã Creating safety backup...');
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  
  try {
    const result = await dynamodb.scan({
      TableName: 'feelcycle-hub-studios-dev'
    }).promise();
    
    require('fs').writeFileSync(
      `studio-backup-${timestamp}.json`, 
      JSON.stringify(result.Items, null, 2)
    );
    
    console.log(`‚úÖ Backup created: studio-backup-${timestamp}.json`);
    return true;
  } catch (error) {
    console.error('‚ùå Backup creation failed:', error);
    return false;
  }
}

async function recoverCriticalStudios() {
  console.log('üö® Phase 1: Recovering 4 critical studios with NULL studioName...');
  
  const criticalStudios = ['ykh', 'nmg', 'sjk', 'jyo'];
  
  for (const studioCode of criticalStudios) {
    const studioInfo = STUDIO_MAPPING[studioCode];
    if (!studioInfo) {
      console.error(`‚ùå No mapping found for ${studioCode}`);
      continue;
    }
    
    try {
      console.log(`üîß Recovering ${studioCode}: ${studioInfo.name} (${studioInfo.region})`);
      
      await dynamodb.update({
        TableName: 'feelcycle-hub-studios-dev',
        Key: { studioCode },
        UpdateExpression: 'SET studioName = :name, #r = :region, batchStatus = :status, lastUpdated = :updated',
        ExpressionAttributeNames: { '#r': 'region' },
        ExpressionAttributeValues: {
          ':name': studioInfo.name,
          ':region': studioInfo.region,
          ':status': 'pending',
          ':updated': new Date().toISOString()
        }
      }).promise();
      
      console.log(`‚úÖ ${studioCode} recovered successfully`);
      
    } catch (error) {
      console.error(`‚ùå Failed to recover ${studioCode}:`, error);
    }
  }
}

async function verifyRecovery() {
  console.log('üîç Verifying recovery...');
  
  try {
    const result = await dynamodb.scan({
      TableName: 'feelcycle-hub-studios-dev',
      ProjectionExpression: 'studioCode, studioName, #r, batchStatus',
      ExpressionAttributeNames: { '#r': 'region' }
    }).promise();
    
    const nullStudios = result.Items.filter(item => !item.studioName);
    const nullRegions = result.Items.filter(item => !item.region);
    
    console.log(`üìä Recovery status:`);
    console.log(`   ‚Ä¢ Studios with NULL name: ${nullStudios.length}`);
    console.log(`   ‚Ä¢ Studios with NULL region: ${nullRegions.length}`);
    
    if (nullStudios.length > 0) {
      console.log('‚ùå Still have NULL studioName:', nullStudios.map(s => s.studioCode));
    }
    
    return nullStudios.length === 0;
    
  } catch (error) {
    console.error('‚ùå Verification failed:', error);
    return false;
  }
}

async function main() {
  console.log('üõ°Ô∏è  Safe Studio Recovery - Phase 1: Critical Studios');
  console.log('='.repeat(60));
  
  // Safety backup
  const backupSuccess = await createBackup();
  if (!backupSuccess) {
    console.error('‚ùå Cannot proceed without backup');
    process.exit(1);
  }
  
  // Recover critical studios
  await recoverCriticalStudios();
  
  // Verify recovery
  const success = await verifyRecovery();
  
  if (success) {
    console.log('‚úÖ Phase 1 completed successfully');
    console.log('üìã Next: Run Phase 2 to fix remaining region data');
  } else {
    console.log('‚ùå Phase 1 incomplete, manual intervention may be needed');
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { STUDIO_MAPPING, recoverCriticalStudios, verifyRecovery };